{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":""},{"location":"#programming","title":"\ud83d\udcbb Programming","text":""},{"location":"#arduino","title":"\ud83d\udcdf Arduino","text":"<ul> <li>How To Install and Make Use Of Arduino-CLI</li> </ul>"},{"location":"#docker","title":"\ud83d\udc33 Docker","text":"<ul> <li>How to remove all Docker images at once</li> </ul>"},{"location":"Programming/Arduino/How%20To%20Install%20and%20Make%20Use%20Of%20Arduino-CLI/","title":"How To Install and Make Use Of Arduino-CLI","text":"<p>Arduino CLI is an All-in-One solution for managing libraries and boards, building and uploading sketches and many other tools. It can be used for all boards and platforms compatible with Arduino. It enables you to control them via the command line.</p> <p>Arduino CLI is not only a stand-alone tool, but also the heart of all official Arduino development software (Arduino IDE, Arduino Web Editor). </p>","tags":["arduino"]},{"location":"Programming/Arduino/How%20To%20Install%20and%20Make%20Use%20Of%20Arduino-CLI/#installation-of-the-arduino-cli-on-macos","title":"Installation of the Arduino-CLI on macOS","text":"<p>On macOS it\u2018s most convenient to make use of HomeBrew to install the Arduino-CLI:</p> <pre><code>brew update\nbrew install arduino-cli\n</code></pre>","tags":["arduino"]},{"location":"Programming/Arduino/How%20To%20Install%20and%20Make%20Use%20Of%20Arduino-CLI/#validating-the-installation","title":"Validating the installation","text":"<p>To check the installation you can let <code>arduino-cli</code> print its version number in the terminal:</p> <pre><code>arduino-cli version\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 arduino-cli\u00a0 Version: 0.34.2 Commit: 963c1a76 Datum: 2023-09-11T09:50:44Z\narduino-cli help core\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \n\nArduino-Kern-Operationen.\nUsage:\n\u00a0 arduino-cli core [command]\n\nBeispiele:\n\u00a0 arduino-cli core update-index\n\n...\n</code></pre> <p>The Arduino CLI consists of a single executable file. By default, the Arduino CLI uses three directories for its functionalities.</p> <p>data - for storing all configurations and platform files downloads - for downloading installation packages, libraries, etc. user - where the libraries and sketches are stored</p> <p>The paths to these directories are determined by:</p> <pre><code>arduino-cli config dump\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 board_manager:\n\u00a0 additional_urls: []\nbuild_cache:\n\u00a0 compilations_before_purge: 10\n\u00a0 ttl: 720h0m0s\ndaemon:\n\u00a0 port: \"50051\"\ndirectories:\n\u00a0 data: /Users/&lt;user&gt;/Library/Arduino15\n\u00a0 downloads: /Users/&lt;user&gt;/Library/Arduino15/staging\n\u00a0 user: /Users/&lt;user&gt;/Documents/Arduino\nlibrary:\n\u00a0 enable_unsafe_install: false\nlogging:\n\u00a0 file: \"\"\n\u00a0 format: text\n\u00a0 level: info\nmetrics:\n\u00a0 addr: :9090\n\u00a0 enabled: true\noutput:\n\u00a0 no_color: false\nsketch:\n\u00a0 always_export_binaries: false\nupdater:\n\u00a0 enable_notification: true\n</code></pre> <p>The data folder is the same as the Arduino IDE folder where all your platforms and configurations are stored. This path should not be changed. The download directory can also be retained. However, the user directory may need to be changed if you want to use already installed libraries and created sketches. To do this, a configuration file must be created specifically for the Arduino CLI. This can be done with the following command:</p> <pre><code>arduino-cli config init\n</code></pre> <p>This simply creates a new YAML file in the data directory. This file has the same content as when you execute the <code>config dump</code> command. You can then open the file in a text editor and change the user directory to the existing sketches directory and save it. </p> <p>In my case this folder is set tof:  <code>~/Development/personal/arduino/Sketches</code>. </p> <p>To test whether the configuration works, simply try to list the installed libraries with the following command:</p> <pre><code>arduino-cli lib list \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Name \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Installiert \u00a0 Verf\u00fcgbar Ort \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0    Beschreibung\u00a0 \u00a0\nArduino_TensorFlowLite 2.4.0-ALPHA \u00a0 - \u00a0 \u00a0 \u00a0 \u00a0 LIBRARY_LOCATION_USER   - \u00a0 \u00a0 \u00a0 \u00a0 \nezTime \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 0.8.3 \u00a0 \u00a0 \u00a0 \u00a0 - \u00a0 \u00a0 \u00a0 \u00a0 LIBRARY_LOCATION_USER.  - \u00a0 \u00a0 \u00a0 \u00a0 \nM5ez \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 2.3.0 \u00a0 \u00a0 \u00a0 \u00a0 - \u00a0 \u00a0 \u00a0 \u00a0 LIBRARY_LOCATION_USER   - \u00a0 \u00a0 \u00a0 \nM5Stack\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 0.4.6 \u00a0 \u00a0 \u00a0 \u00a0 - \u00a0 \u00a0 \u00a0 \u00a0 LIBRARY_LOCATION_USER.  -\n</code></pre>","tags":["arduino"]},{"location":"Programming/Arduino/How%20To%20Install%20and%20Make%20Use%20Of%20Arduino-CLI/#building-a-sketch","title":"Building a sketch","text":"<p>The target board must be known in order to translate a sketch. The Fully Qualified Board Name (FQBN) is decisive. The following command is used to determine the FQBN of a board connected via USB:</p> <pre><code>arduino-cli board list \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Port\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Protokoll Typ \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Platinenname\u00a0 \u00a0 \u00a0 \u00a0 FQBN\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Kern\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\n/dev/cu.Bluetooth-Incoming-Port serial\u00a0 \u00a0 Serial Port \u00a0 \u00a0 \u00a0 Unbekannt \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \n/dev/cu.usbmodem2101\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 serial\u00a0 \u00a0 Serial Port (USB) Arduino Nano 33 BLE arduino:mbed:nano33ble\u00a0 \u00a0 \u00a0 arduino:mbed\u00a0 \u00a0 \u00a0\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Serial Port (USB) Arduino Nano 33 BLE arduino:mbed_nano:nano33ble arduino:mbed_nano\n</code></pre> <p>In this example an Arduino Nano 33 BLE is connected via USB. The <code>compile</code> command gets called from the parent directory using the specification of:</p> <ul> <li>FQBN of the target board</li> <li>Name of the sketch</li> </ul> <pre><code>arduino-cli compile --fqbn arduino:mbed:nano33ble Blink \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \n\nDer Sketch verwendet 84280 Bytes (8%) des Programmspeicherplatzes. Das Maximum sind 983040 Bytes.\n\nGlobale Variablen verwenden 43968 Bytes (16%) des dynamischen Speichers, 218176 Bytes f\u00fcr lokale Variablen verbleiben. Das Maximum sind 262144 Bytes.\n\nUsed platform Version Pfad\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \narduino:mbed\u00a0 3.3.0 \u00a0 /Users/&lt;user&gt;/Library/Arduino15/packages/arduino/hardware/mbed/3.3.0\n</code></pre>","tags":["arduino"]},{"location":"Programming/Docker/How%20to%20remove%20all%20Docker%20images%20at%20once/","title":"How to remove all Docker images at once","text":"<p>Sometimes it is necessary to remove all Docker images or containers on your machine. Here is how it goes. It's pretty easy.</p> <p></p>","tags":["docker"]},{"location":"Programming/Docker/How%20to%20remove%20all%20Docker%20images%20at%20once/#problem","title":"Problem","text":"<p>You use Docker. You have created a bunch of containers and images over time that you want to get rid of all at once.</p>","tags":["docker"]},{"location":"Programming/Docker/How%20to%20remove%20all%20Docker%20images%20at%20once/#solution","title":"Solution","text":"<p>Attention: This will delete all your images or containers. It is not possible to restore them.</p> <pre><code>#!/bin/bash\n# Delete all containers\ndocker rm $(docker ps -a -q)\n# Delete all images\ndocker rmi $(docker images -q)\n</code></pre>","tags":["docker"]}]}